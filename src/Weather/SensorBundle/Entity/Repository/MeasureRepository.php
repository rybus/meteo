<?php

namespace Weather\SensorBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Weather\SensorBundle\Entity\Sensor;
use Doctrine\DBAL\Types\Type;

/**
 * MeasureRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MeasureRepository extends EntityRepository
{
    /**
     * Retrieve the minimum measure for a given period and a sensor
     *
     * @param Sensor    $sensor    the sensor to get the stats from
     * @param \DateTime $startDate the start date of the period
     * @param \DateTime $endDate   the end date of the period
     *
     * @return Measure
     */
    public function getMinimumMeasure(Sensor $sensor, \DateTime $startDate, \DateTime $endDate)
    {
        $qb = $this->createQueryBuilder('m')
            ->select('m, MIN(m.value) AS min_measure');
        $result = $qb->where($qb->expr()->eq('m.sensor', ':sensor'))
            ->andWhere($qb->expr()->between('m.date', ':date_from', ':date_to'))
            ->setParameter('date_from', $startDate, Type::DATETIME)
            ->setParameter('date_to', $endDate, Type::DATETIME)
            ->setParameter('sensor', $sensor)
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();

        return (!$result) ? null : $result[0];
    }

    /**
     * Retrieve the maximum measure for a given period and a sensor
     *
     * @param Sensor    $sensor    the sensor to get the stats from
     * @param \DateTime $startDate the start date of the period
     * @param \DateTime $endDate   the end date of the period
     *
     * @return ArrayCollection
     */
    public function getMaximumMeasure(Sensor $sensor, \DateTime $startDate, \DateTime $endDate)
    {
        $qb = $this->createQueryBuilder('m')
            ->select('m, MAX(m.value) AS max_measure');
        $result = $qb->where($qb->expr()->eq('m.sensor', ':sensor'))
            ->andWhere($qb->expr()->between('m.date', ':date_from', ':date_to'))
            ->setParameter('date_from', $startDate, Type::DATETIME)
            ->setParameter('date_to', $endDate, Type::DATETIME)
            ->setParameter('sensor', $sensor)
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();

        return (!$result) ? null : $result[0];
    }

    /**
     * Get the average measure for a sensor and a period
     *
     * @param Sensor    $sensor    the sensor to get the stats from
     * @param \DateTime $startDate the start date of the period
     * @param \DateTime $endDate   the end date of the period
     *
     * @return null
     */
    public function getAverageMeasure(Sensor $sensor, \DateTime $startDate, \DateTime $endDate)
    {
        $qb = $this->createQueryBuilder('m')
            ->select('AVG(m.value) as avg_measure');
        $result = $qb->where($qb->expr()->eq('m.sensor', ':sensor'))
            ->andWhere($qb->expr()->between('m.date', ':date_from', ':date_to'))
            ->setParameter('date_from', $startDate, Type::DATETIME)
            ->setParameter('date_to', $endDate, Type::DATETIME)
            ->setParameter('sensor', $sensor)
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();

        return (!$result) ? null : $result[0];
    }

    /**
     * Get measures by sensor and by period
     *
     * @param Sensor    $sensor    the sensor we need to get measures from
     * @param \DateTime $startDate the start date of the measures
     * @param \DateTime $endDate   the end date of the measures
     *
     * @return array
     */
    public function getMeasuresBySensorAndByPeriod(Sensor $sensor, \DateTime $startDate, \DateTime $endDate)
    {
        $qb = $this->createQueryBuilder('m');

        return $qb->where($qb->expr()->eq('m.sensor', ':sensor'))
            ->andWhere($qb->expr()->between('m.date', ':date_from', ':date_to'))
            ->setParameter('date_from', $startDate, Type::DATETIME)
            ->setParameter('date_to', $endDate, Type::DATETIME)
            ->setParameter('sensor', $sensor)
            ->getQuery()
            ->getResult();
    }
}
